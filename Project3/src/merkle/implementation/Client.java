package merkle.implementation;

import merkle.Configuration;
import merkle.IClient;
import merkle.IMerkleTree;

import java.util.List;

/**
 * TASK 2
 * TODO: IMPLEMENT verifyResponse
 *
 * @author Jun Soo Kim kim1893
 * @pso PSO-17
 * @date 10/21/16
 */
public class Client extends IClient {

    /**
     * Given the path siblings this function has to verify if
     * the masterHash generated by concatenating and hashing
     * level by level is the same as <i>this.masterHash</i>
     * You can use <i>Configuration.hashFunction</i>
     */
    protected boolean verifyResponse(List<IMerkleTree.Node> pathSiblings) throws Exception {
        //TODO:implement
        boolean matched = false;
        /*
         * You need to use Configuration.hashFunction and this.masterHash to determine a match
         */
        int times = 0;
        int indexToStart = pathSiblings.get(times).getIndex();
        String hash = "";
        IMerkleTree.Node temp = null;

        while (times != pathSiblings.size()) {
            if (times == 0) {
                if (indexToStart % 2 == 1)
                    hash = Configuration.hashFunction.concatenateHash(pathSiblings.get(times + 1), pathSiblings.get(times));
                else
                    hash = Configuration.hashFunction.concatenateHash(pathSiblings.get(times), pathSiblings.get(times + 1));
                times++;
            } else {
                if (indexToStart % 2 == 1)
                    hash = Configuration.hashFunction.concatenateHash(temp, pathSiblings.get(times));
                else
                    hash = Configuration.hashFunction.concatenateHash(pathSiblings.get(times), temp);
            }
            if (times == pathSiblings.size() - 1) {
                break;
            }
            temp = new IMerkleTree.Node(hash, indexToStart / 2);
            times++;
            indexToStart = pathSiblings.get(times).getIndex();
        }
        if (hash.equals(this.masterHash)) { //final hash compare
            return true;
        }
        return matched;
    }
}
